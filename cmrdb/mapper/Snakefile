onsuccess:
    print("\u001b[42mCOMPLETE: CMRdb map successfully finished\u001b[0m")

onerror:
    print("\u001b[41mERROR: CMRdb map failed\u001b[0m")

onstart:
    import os
    import sys

    from snakemake.utils import logger, min_version

    # minimum required snakemake version
    min_version("6.5.3")
    short_reads_1 = config["short_reads_1"]
    short_reads_2 = config["short_reads_2"]
    n_cores = config["n_cores"]
    output = os.path.realpath(config["output"])
    max_memory = config["max_memory"]
    sequencer_source = config["sequencer_source"]
    skip_qc = config["skip_qc"]
    min_read_aligned_percent = config["min_read_aligned_percent"]
    min_read_percent_identity = config["min_read_percent_identity"]
    singlem_db = config["singlem_db"]
    genome_db = config["genome_db"]
    singlem_metapackage = config["singlem_metapackage"]

rule all:
    input:
        "qc/done",
        "singlem/done",
        "genomes/done",
        "coverm/done",
        "coverm_filter/done",
        "mora/done",
        "final/done"
    threads:
        config["n_cores"]
    resources:
        mem_gb = config["max_memory"]


rule qc:
    input:
    output:
        "qc/done"
    conda:
        "kneaddata-v0.12.0"
    threads:
        config["n_cores"]
    resources:
        mem_gb = config["max_memory"]
    message:
        "Performing read QC..."
    script:
        "../scripts/qc.py"

rule singlem:
    input:
        "qc/done"
    output:
        "singlem/done"
    conda:
        "singlem-dev"
    threads:
        config["n_cores"]
    resources:
        mem_gb = config["max_memory"]
    params:
        reads_1 = config["short_reads_1"],
        reads_2 = config["short_reads_2"],
        singlem_metapackage = config["singlem_metapackage"],
        singlem_db = config["singlem_db"],
        genome_db = config["genome_db"]
    message:
        "Querying raw reads against SingleM database..."
    shell:
        "conda env list && "
        "python /work/microbiome/sw/singlem_repos/singlem/bin/singlem pipe \
        -1 {params.reads_1} \
        -2 {params.reads_2} \
        --threads {threads} \
        --metapackage {params.singlem_metapackage}  \
        --otu-table singlem/singlem_full_table && "

        "python /work/microbiome/sw/singlem_repos/singlem/bin/singlem query \
        --threads {threads} \
        --query-otu-table singlem/singlem_full_table \
        --db {params.singlem_db} \
        --limit-per-sequence 1 \
        > singlem/singlem_query_output && "

        "cat singlem/singlem_query_output | awk '{{print $6}}' | sed '/sample/d' | sort -u > singlem/MGYG_query_output && " #get MGYG id

        "mkdir -p genomes && fgrep -f singlem/MGYG_query_output {params.genome_db} | awk '{{print $3}}' > genomes/list_of_genomes && " #get fna list

        "touch singlem/done"

rule cat_genomes:
    input:
        "singlem/done"
    output:
        "genomes/done"
    threads:
        config["n_cores"]
    resources:
        mem_gb = config["max_memory"]
    message:
        "Concatenating genomes identified by SingleM..."
    shell:
        "cat `cat genomes/list_of_genomes` > genomes/combined_reference.fna && "
        "touch"


rule coverm:
    input:
        'singlem/done'
    output:
        "coverm/done"
    conda:
        "coverm-dev"
    threads:
        config["n_cores"]
    resources:
        mem_gb = config["max_memory"]
    params:
        fna_file = 'genomes/combined_reference.fna',
        qc_reads_1 = 'qc/clean_reads/R1/*',
        qc_reads_2 = 'qc/clean_reads/R2/*',
        bam = os.path.join('coverm/*.bam')
    message:
        "Aligning reads to reference sequences..."
    shell:
        "echo R1 = {params.qc_reads_1} && "
        "echo R2 = {params.qc_reads_2} && "
        "cargo run --manifest-path /work/microbiome/sw/coverm_repos/coverm-dev/CoverM/Cargo.toml -- make \
        -1 {params.qc_reads_1} \
        -2 {params.qc_reads_2} \
        -r {params.fna_file} \
        --threads {threads} \
        --minimap2-parameters '--secondary=yes -N 1000' \
        -o coverm && "

        "mv {params.bam} coverm/raw.bam && "

        "touch coverm/done"

rule coverm_filter:
    input:
        'coverm/done'
    output:
        "coverm_filter/done",
    threads:
        config["n_cores"]
    conda:
        "coverm-dev"
    resources:
        mem_gb = config["max_memory"]
    params:
        bam = 'coverm/raw.bam',
        min_read_aligned_percent = config["min_read_aligned_percent"],
        min_read_percent_identity = config["min_read_percent_identity"]
    message:
        "Filtering read alignments..."
    shell:
        "echo min_read_percent_identity = {params.min_read_percent_identity} && "
        "echo min_read_aligned_percent = {params.min_read_aligned_percent} && "

        "cargo run --manifest-path /work/microbiome/sw/coverm_repos/coverm-dev/CoverM/Cargo.toml -- filter \
        -b {params.bam} \
        --min-read-percent-identity {params.min_read_percent_identity} \
        --min-read-aligned-percent {params.min_read_aligned_percent} \
        --include-secondary \
        --threads {threads} \
        -o coverm_output/filtered.bam && "

        "samtools view -h -o coverm_filter/filtered.sam coverm_filter/filtered.bam && "

        "touch coverm_filter/done"

rule mora:
    input:
        'coverm_filter/done'
    output:
        "mora/done"
    threads:
        config["n_cores"]
    conda:
        "coverm-dev"
    resources:
        mem_gb = config["max_memory"]
    params:
        sam = 'coverm_filter/filtered.sam',
        output = os.path.realpath(config["output"])
    message:
        "Reassigning multi-mapped reads via abundance-aware expectation maximisation..."
    shell:
        "singularity exec \
        --bind /mnt/hpccs01/work/microbiome/sw/mora/target/release/mora \
        --bind {params.output} \
        /mnt/hpccs01/work/microbiome/sw/mora  \
        /mnt/hpccs01/work/microbiome/sw/mora/target/release/mora \
        -s {params.sam} \
        -o {params.output}/mora/read_mappings \
        -a {params.output}/mora/abundance \
        --threads {threads} && "

        "touch mora/done"

rule finalise:
    input:
        'mora/done'
    output:
        "final/done",
    threads:
        config["n_cores"]
    conda:
        'datamash'
    resources:
        mem_gb = config["max_memory"]
    params:
    message:
        "Assigning taxonomy and finalising results..."
    shell:
        "cat mora_output/abundance | awk '{{print $2 \"\t\" $3}}' | sort -k 1b,1 > temp1 && "
        "sort  -k 1b,1  /work/microbiome/db/uhgg_v2/MGYG_r214.tsv > temp2 && "
        "sed 's/_/\t/' temp1 | awk -F\"\t\" '{{print $1 \"\t\" $3}}' > temp1b && "
        "cat temp1b | datamash -s -g1 sum 2 > temp1c && "
        "join -j1 temp2 temp1c -t $'\t' > final/strain_level_abundance && "
        "awk -F\"\t\" '{{print $2 \"\t\" $3}}' final/strain_level_abundance > temp4 && "
        "cat temp4 | datamash -s -g1 sum 2 > final/species_level_abundance && "

        "rm temp* && "

        "touch final/done"
